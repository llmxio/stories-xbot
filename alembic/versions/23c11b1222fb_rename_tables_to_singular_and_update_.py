"""Rename tables to singular and update User model

Revision ID: 23c11b1222fb
Revises: convert_timestamps_to_datetime
Create Date: 2025-06-20 07:39:43.158953

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "23c11b1222fb"
down_revision: Union[str, Sequence[str], None] = "convert_timestamps_to_datetime"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.rename_table("bug_reports", "bug_report")
    op.rename_table("invalid_link_violations", "invalid_link_violation")
    op.rename_table("monitor_sent_stories", "monitor_sent_story")
    op.rename_table("monitors", "monitor")
    op.rename_table("tasks", "task")
    op.rename_table("users", "user")

    op.add_column(
        "user",
        sa.Column(
            "is_blocked",
            sa.Boolean(),
            nullable=False,
            server_default=sa.text("false"),
        ),
    )

    op.drop_table("user_request_log")
    op.drop_table("blocked_users")
    op.drop_table("profile_requests")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.rename_table("bug_report", "bug_reports")
    op.rename_table("invalid_link_violation", "invalid_link_violations")
    op.rename_table("monitor_sent_story", "monitor_sent_stories")
    op.rename_table("monitor", "monitors")
    op.rename_table("task", "tasks")
    op.rename_table("user", "users")

    op.drop_column("users", "is_blocked")

    op.create_table(
        "profile_requests",
        sa.Column("chat_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("target_username", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "requested_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["chat_id"],
            ["chats.id"],
            name=op.f("profile_requests_chat_id_fkey"),
        ),
        sa.PrimaryKeyConstraint("chat_id", "target_username", name=op.f("profile_requests_pkey")),
    )
    op.create_table(
        "blocked_users",
        sa.Column("chat_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("blocked_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("is_bot", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["chat_id"], ["chats.id"], name=op.f("blocked_users_chat_id_fkey")),
        sa.PrimaryKeyConstraint("chat_id", name=op.f("blocked_users_pkey")),
    )
    op.create_table(
        "user_request_log",
        sa.Column("chat_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column(
            "requested_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["chat_id"], ["chats.id"], name=op.f("user_request_log_chat_id_fkey")
        ),
        sa.PrimaryKeyConstraint("chat_id", "requested_at", name=op.f("user_request_log_pkey")),
    )
    # ### end Alembic commands ###
