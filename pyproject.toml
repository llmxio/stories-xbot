[project]
name = "stories-xbot"
version = "0.1.0"
description = "Telegram bot and userbot implementation using PyrogramMod and aiogram"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
  "aiogram>=3.1.0",
  "sqlalchemy[asyncio]>=2.0.0",
  "python-dotenv>=1.0.0",
  "pydantic>=2.0.0",
  "alembic>=1.12.0",
  "aiosqlite>=0.20.0",
  "pydantic-settings>=2.9.1",
  "tgcrypto>=1.2.5",
  "ruff>=0.11.13",
  "pytest>=8.4.0",
  "pytest-asyncio>=0.24.0",
  "uvloop>=0.21.0",
  "redis>=6.2.0",
  "mypy>=1.16.1",
  "asyncpg>=0.30.0",
  "ujson>=5.10.0",
  "pyrogrammod",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v"
pythonpath = "./src"
asyncio_mode = "auto"


[tool.mypy]
ignore_missing_imports = true
namespace_packages = true
mypy_path = "src"

[tool.ruff]
line-length = 110
target-version = "py313"

[tool.ruff.lint]
select = ["E4", "E7", "E9", "F", "I"]

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.alembic]

# path to migration scripts.
# this is typically a path given in POSIX (e.g. forward slashes)
# format, relative to the token %(here)s which refers to the location of this
# ini file
script_location = "%(here)s/alembic"

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# for all available tokens
# file_template = "%%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s"

# additional paths to be prepended to sys.path. defaults to the current working directory.
prepend_sys_path = ["src"]

[tool.uv.sources]
pyrogrammod = { git = "https://github.com/PyrogramMod/PyrogramMod.git", rev = "main" }

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python>=3.9 or backports.zoneinfo library and tzdata library.
# Any required deps can installed by adding `alembic[tz]` to the pip requirements
# string value is passed to ZoneInfo()
# leave blank for localtime
# timezone =

# max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to <script_location>/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# version_locations = [
#    "%(here)s/alembic/versions",
#    "%(here)s/foo/bar"
# ]


# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = "utf-8"

# This section defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples
# [[tool.alembic.post_write_hooks]]
# format using "black" - use the console_scripts runner,
# against the "black" entrypoint
# name = "black"
# type = "console_scripts"
# entrypoint = "black"
# options = "-l 79 REVISION_SCRIPT_FILENAME"
#
# [[tool.alembic.post_write_hooks]]
# lint with attempts to fix using "ruff" - use the exec runner,
# execute a binary
# name = "ruff"
# type = "exec"
# executable = "%(here)s/.venv/bin/ruff"
# options = "check --fix REVISION_SCRIPT_FILENAME"
